#include <stdio.h>
#include <string.h>

#define MAX 10

int main() {
    char nonTerminal;
    char prod[MAX][MAX], alpha[MAX], beta[MAX];
    int n, i, j, k, prefixLen, flag = 0;

    printf("Enter the non-terminal: ");
    scanf(" %c", &nonTerminal);

    printf("Enter number of productions: ");
    scanf("%d", &n);

    printf("Enter the productions (RHS only):\n");
    for (i = 0; i < n; i++) {
        scanf("%s", prod[i]);
    }

    // Step 1: Find the longest common prefix
    prefixLen = strlen(prod[0]);
    for (i = 1; i < n; i++) {
        j = 0;
        while (j < strlen(prod[i]) && j < prefixLen && prod[0][j] == prod[i][j]) {
            j++;
        }
        prefixLen = j;
    }

    if (prefixLen == 0) {
        printf("\nNo Left Factoring needed.\n");
        printf("%c -> ", nonTerminal);
        for (i = 0; i < n; i++) {
            printf("%s", prod[i]);
            if (i != n - 1) printf(" | ");
        }
        printf("\n");
    } else {
        flag = 1;
        // Extract prefix
        strncpy(alpha, prod[0], prefixLen);
        alpha[prefixLen] = '\0';

        printf("\nGrammar after Left Factoring:\n");
        printf("%c -> %s%c'\n", nonTerminal, alpha, nonTerminal);

        printf("%c' -> ", nonTerminal);
        for (i = 0; i < n; i++) {
            if (strlen(prod[i]) == prefixLen) {
                printf("e");
            } else {
                for (j = prefixLen; j < strlen(prod[i]); j++)
                    printf("%c", prod[i][j]);
            }
            if (i != n - 1) printf(" | ");
        }
        printf("\n");
    }
    return 0;
}
